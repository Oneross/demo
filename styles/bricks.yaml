cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    rock:
        extends: polygons
        material:
            normal:
                texture: procedural/rock.jpg
                mapping: uv
            ambient: 0.8
            diffuse: 1
            specular: 0
        shaders:
            blocks:
                globals: |
                    mat2 rotate2d(float _angle){
                        return mat2(cos(_angle),-sin(_angle),
                                    sin(_angle),cos(_angle));
                    }

                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }

                    float box(vec2 _st, vec2 _size){
                        _size = vec2(0.5)-_size*0.5;
                        vec2 uv = smoothstep(_size,_size+vec2(0.0001),_st);
                        uv *= smoothstep(_size,_size+vec2(0.0001),vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }
                normal: |
                    vec2 st = v_texcoord.xy;
                    if ( dot(v_normal,vec3(0.,0.,1.)) == 0.0 ){
                        st /= vec2(2.15,0.65)/2.15;
                        st = brickTile(st,4.0);
                        if( box(st,vec2(0.95)) < 0.5){
                            normal = v_normal;
                            normal += vec3(st.x*2.0-1.,0.,1.0-(st.y*2.0-1.));
                        } else {
                            g_material.diffuse.rgb *= vec3(0.660,0.005,0.000);
                            g_material.ambient.rgb *= vec3(0.478,0.247,0.129);
                        }
                    }
                    

sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        data:
            source: osm
            layer: earth
        style:
            order: 0
            color: '#ddeeee'
    landuse:
        data:
            source: osm
            layer: landuse
        style:
            order: 1
            color: '#aaffaa'
            interactive: true

    water:
        data:
            source: osm
            layer: water
        style:
            order: 2
            color: '#88bbee'

    roads:
        data:
            source: osm
            layer: roads
        style:
            order: 3
            color: gray    
            width: 8
        highway:
            filter:
                kind: highway
            style:
                color: '#cc6666'
                width: 12
                outline:
                    color: grey
                    width: 3
        tunnel:
            filter:
                is_tunnel: yes
            style:
                color: tan
            rail:
                filter:
                    kind: rail
                style:
                    width: 0
        minor_road:
            filter:
                kind: minor_road
            style:
                color: lightgrey
                width: 5
        path:
            filter:
                kind: path
            style:
                color: [0.8, 0.8, 0.8]
                width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            style:
                color: pink
                width: 3
    
    buildings:
        data:
            source: osm
            layer: buildings
        style:
            name: rock
            order: 4
            color: |
                function () {
                    var h = feature.height || 20;
                    h = Math.min((h + 50)/ 250, .8);
                    h = Math.max(h, .4);
                    return [h, h, h];
                }
            extrude: true