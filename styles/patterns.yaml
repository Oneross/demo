cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .3
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .3
styles:
    texture:
        extends: polygons
        material:
            ambient: 1
            diffuse: 1
    plain:
        extends: polygons
        texcoords: true
        material:
            ambient: 1
            diffuse: 1
        shaders:
            blocks:
                globals: |

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    vec2 rotate2D(vec2 _st, float _angle){
                      _st -= 0.5;
                      _st =  mat2(cos(_angle),-sin(_angle),
                                  sin(_angle),cos(_angle)) * _st;
                      _st += 0.5;
                      return _st;
                    }

                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }

                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }

                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      return smoothstep(1.0-_radius,1.0-_radius+_radius*0.2,1.-dot(pos,pos)*3.14);
                    }

                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        float scale = 20.0;
                        _pos *= scale;
                        _pos = rotate2D( _pos, _angle );
                        return smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                color: |
                    vec2 st = v_world_position.xy*0.01;
                    if ( color.rgb == vec3(0.0) ){
                        // Border
                        color.rgb = vec3(0.204,0.204,0.204);
                    } else {
                        // Fill
                        float b = 1.0-getBrightness(color.rgb);
                        float pattern = 0.0;
                        pattern = getHatch(st,3.1415*b,b);
                        color.rgb = mix(vec3(0.204,0.204,0.204),vec3(0.992,0.961,0.902),pattern);
                    }

    buildings:
        extends: polygons
        texcoords: true
        material:
            ambient: 0.8
            diffuse: 1
        shaders:
            blocks:
                globals: |

                    float random( in float _x){
                        return fract(sin(_x)*1e4);
                    }

                    vec2 rotate2D(vec2 _st, float _angle){
                      _st -= 0.5;
                      _st =  mat2(cos(_angle),-sin(_angle),
                                  sin(_angle),cos(_angle)) * _st;
                      _st += 0.5;
                      return _st;
                    }

                    vec2 tile(vec2 _st, float _zoom){
                      _st *= _zoom;
                      return fract(_st);
                    }

                    vec2 brickTile(vec2 _st, float _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x += 0.5;
                        }
                        return fract(_st);
                    }

                    float circle(vec2 _st, float _radius){
                      vec2 pos = vec2(0.5)-_st;
                      return smoothstep(1.0-_radius,1.0-_radius+_radius*0.2,1.-dot(pos,pos)*3.14);
                    }

                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float getHatch(in vec2 _pos, float _angle, float _brigtness){
                        float scale = 20.0;
                        _pos *= scale;
                        _pos = rotate2D( _pos, _angle );
                        return smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                color: |
                    vec2 st = v_texcoord.xy;
                    if (color.rgb == vec3(0.0)){
                        // Border
                        color.rgb = mix(vec3(0.204,0.204,0.204),vec3(0.992,0.961,0.902),smoothstep(0.4,0.5,st.x));
                    } else {
                        // Fill
                        float b = random(getBrightness(color.rgb));
                        float pattern = 0.0;
                        if (b > 0.9){
                            if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                                st = fract(v_world_position.xy*0.1);
                            } else {
                                st = tile(st,5.);
                            }
                            pattern = circle(st,0.2);
                        } else if (b > 0.8){
                            if( dot(v_normal,vec3(0.,0.,1.)) >= 0.9 ){
                                st = fract(v_world_position.xy*0.1);
                            } else {
                                st = tile(st,5.);
                            }
                            pattern = 1.0-circle(st,0.1);
                        } else {
                            float gradient = floor(b*10.)*0.1;
                            float angle = 3.1415 * gradient;
                            pattern = getHatch(st,angle,gradient);
                        } 
                        pattern *= clamp(v_world_position.z*0.1,0.,1.);
                        color.rgb = mix(vec3(0.204,0.204,0.204),vec3(0.992,0.961,0.902),pattern);
                    }

sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        data:
            source: osm
            layer: earth
        style:
            name: plain
            order: 0
            color: '#ddeeee'
            outline:
                color: [0, 0, 0]
                width: 2
    landuse:
        data:
            source: osm
            layer: landuse
        style:
            name: plain
            order: 1
            color: '#aaffaa'
            outline:
                color: [0, 0, 0]
                width: 2

    water:
        data:
            source: osm
            layer: water
        style:
            order: 2
            color: '#343434'

    roads:
        data:
            source: osm
            layer: roads
        style:
            name: texture
            order: 3
            color: '#343434'    
            width: 8
            outline:
                color: '#FDF5E6'
                width: 2
        highway:
            filter:
                kind: highway
            style:
                color: '#343434'
                width: 12
                outline:
                    color: '#FDF5E6'
                    width: 2
        tunnel:
            filter:
                is_tunnel: yes
            style:
                color: '#343434'
            rail:
                filter:
                    kind: rail
                style:
                    width: 0
        minor_road:
            filter:
                kind: minor_road
            style:
                color: '#343434'
                width: 5
                outline:
                    color: '#FDF5E6'
                    width: 1
        path:
            filter:
                kind: path
            style:
                color: '#343434'
                width: 3
                outline:
                    color: '#FDF5E6'
                    width: 1
        rail:
            filter:
                kind: rail
                is_tunnel: no
            style:
                color: '#343434'
                width: 3
                outline:
                    color: '#FDF5E6'
                    width: 1
    
    buildings:
        data:
            source: osm
            layer: buildings
        style:
            name: buildings
            order: 4
            color: Style.color.pseudoRandomColor()
            outline:
                color: [0, 0, 0]
                width: 2
                tile_edges: true
            extrude: true